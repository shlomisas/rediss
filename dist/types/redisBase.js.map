{"version":3,"sources":["types/redisBase.js"],"names":["RedisBase","constructor","client","_client","_beforeAction","_raw","cmd","args","splice"],"mappings":";;;;;;AAIA;;2cAJA;;;;AAMe,MAAMA,SAAN,CAAe;;AAI1BC,gBAAYC,MAAZ,EAAmB;AACf,aAAKC,OAAL,GAAeD,MAAf;AACH;;AAED;;;AAGAE,oBAAe;AACX,YAAG,CAAC,KAAKD,OAAT,EAAkB,MAAM,qCAAN;AACrB;;AAEKE,QAAN,CAAWC,GAAX,EAAe;AAAA;AAAA;;AAAA;AACX,kBAAKF,aAAL;;AAEA,gBAAG,OAAO,MAAKD,OAAL,CAAaG,GAAb,CAAP,KAA6B,UAAhC,EAA4C,MAAM,sCAAN;;AAE5C,gBAAIC,OAAO,CAAC,aAAD,EAAeC,MAAf,CAAsB,CAAtB,CAAX;AACA,mBAAO,MAAKL,OAAL,CAAaG,GAAb,EAAkBC,IAAlB,CAAP;AANW;AAOd;AAtByB;kBAATP,S","file":"redisBase.js","sourcesContent":["/**\r\n * Created by Shlomi\r\n */\r\n\r\nimport {RedisMissingClientError, RedisInvalidCommandError} from '../errors';\r\n\r\nexport default class RedisBase{\r\n\r\n    _client;\r\n\r\n    constructor(client){\r\n        this._client = client;\r\n    }\r\n\r\n    /**\r\n     * @throws RedisMissingClientError\r\n     */\r\n    _beforeAction(){\r\n        if(!this._client) throw new RedisMissingClientError();\r\n    }\r\n\r\n    async _raw(cmd){\r\n        this._beforeAction();\r\n\r\n        if(typeof this._client[cmd] !== 'function') throw new RedisInvalidCommandError();\r\n\r\n        let args = [...arguments].splice(1);\r\n        return this._client[cmd](args);\r\n    }\r\n}\r\n"]}